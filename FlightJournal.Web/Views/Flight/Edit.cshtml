@using FlightJournal.Web
@using FlightJournal.Web.Extensions
@model FlightJournal.Web.Models.Flight
@{
    ViewBag.Title = _("Edit flight");
}
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>@_("Edit flight")</legend>
        @if (Model.Deleted.HasValue)
        {
            <div class="row">
                <div class="col-md-4">
                    <div class="alert alert-danger">
                        <h4>Deleted @Model.Deleted.ToString() by @Model.LastUpdatedBy</h4>
                        <div class="btn-group">
                            @Html.ActionLink(_("Undo Delete"), "Enable", new { id = Model.FlightId, UrlReferrer = ViewBag.UrlReferrer }, new { @class = "btn btn-default btn-danger" })
                            <a href="@ViewBag.UrlReferrer" class="btn btn-default">@_("Back")</a>
                        </div>
                    </div>
                </div>
            </div>
        }
        @Html.HiddenFor(model => model.FlightId)
        @Html.Hidden("UrlReferrer", (string)ViewBag.UrlReferrer)
        <div class="row">
            <div class="col-md-4 col-sm-6 col-xs-12">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Date)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Date)
                    @Html.ValidationMessageFor(model => model.Date)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Departure)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Departure)
                    @Html.ValidationMessageFor(model => model.Departure)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Landing)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Landing)
                    @Html.ValidationMessageFor(model => model.Landing)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PlaneId)
                </div>
                <div class="editor-field">
                    @Html.ExtendedDropDownListFor(model => model.PlaneId, (IEnumerable<ExtendedSelectListItem>)ViewBag.PlaneId, "")
                    @Html.ValidationMessageFor(model => model.PlaneId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.BetalerId)
                </div>
                <div class="editor-field">
                    @Html.DropDownList("BetalerId", String.Empty)
                    @Html.ValidationMessageFor(model => model.BetalerId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PilotId)
                </div>
                <div class="editor-field">
                    @Html.DropDownList("PilotId", String.Empty)
                    @Html.ValidationMessageFor(model => model.PilotId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.PilotBackseatId)
                </div>
                <div class="editor-field">
                    @Html.DropDownList("PilotBackseatId", String.Empty)
                    @Html.ValidationMessageFor(model => model.PilotBackseatId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Description)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Description)
                    @Html.ValidationMessageFor(model => model.Description)
                </div>
            </div>
            <div class="col-md-4 col-sm-6 col-xs-12">
                <div class="editor-label">
                    @Html.LabelFor(model => model.StartTypeId)
                </div>

                <div class="editor-field">
                    @Html.DropDownList("StartTypeId", String.Empty)
                    @Html.ValidationMessageFor(model => model.StartTypeId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.StartedFromId)
                </div>
                <div class="editor-field">
                    @Html.DropDownList("StartedFromId", String.Empty)
                    @Html.ValidationMessageFor(model => model.StartedFromId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.LandedOnId)
                </div>
                <div class="editor-field">
                    @Html.DropDownList("LandedOnId", String.Empty)
                    @Html.ValidationMessageFor(model => model.LandedOnId)
                </div>
            </div>
            <!-- Add the extra clearfix for only the required viewport -->
            <div class="clearfix visible-sm visible-xs"></div>
            <div class="col-md-4 col-sm-12 visible-sm visible-xs">
                <div class="btn-group btn-group-lg ">
                    <input type="submit" value="@_("Save")" class="btn btn-primary" />
                </div>
            </div>

            <div class="col-md-4 col-sm-12">
                <div class="editor-label">
                    @Html.LabelFor(model => model.TachoDeparture)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.TachoDeparture)
                    @Html.ValidationMessageFor(model => model.TachoDeparture)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.TachoLanding)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.TachoLanding)
                    @Html.ValidationMessageFor(model => model.TachoLanding)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.LandingCount)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.LandingCount)
                    @Html.ValidationMessageFor(model => model.LandingCount)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.TaskDistance)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.TaskDistance)
                    @Html.ValidationMessageFor(model => model.TaskDistance)
                </div>


            </div>

        </div>

        <div class="row" style="margin-top: 30px">
            <div class="col-md-3">
                <div class="btn-group btn-group-lg">
                    <input type="submit" value="@_("Save")" class="btn btn-primary" />
                    <a href="@ViewBag.UrlReferrer" class="btn btn-default">@_("Back")</a>
                </div>
            </div>
            <div class="col-md-6">
                <div class="btn-group btn-group-lg">
                    @if (!Model.Deleted.HasValue)
                    {
                        @Html.ActionLink(_("Delete"), "Disable", new { id = Model.FlightId, UrlReferrer = ViewBag.UrlReferrer }, new { @class = "btn btn-default" })
                    }
                    else
                    {
                        @Html.ActionLink(_("Undo Delete"), "Enable", new { id = Model.FlightId, UrlReferrer = ViewBag.UrlReferrer }, new { @class = "btn btn-default btn-danger" })
                        if (User.IsEditor())
                        {
                            @Html.ActionLink(_("Delete permanently"), "Delete", new { id = Model.FlightId }, new { @class = "btn btn-default" })
                        }
                    }
                </div>
            </div>
            @if (Request.IsInstructor())
            {
                <div class="col-md-3">
                    <div class="btn-group btn-group-lg">
                        @Html.ActionLink(_("TrainingLog"), "Edit", "TrainingLog", new {id = Model.FlightId, }, new {@class = "btn btn-default"}, "fa fa-graduation-cap")
                    </div>
                </div>
            }
        </div>
    </fieldset>
}
@Html.Partial("_changeHistory", (IEnumerable<FlightJournal.Web.Models.FlightVersionHistory>)ViewBag.ChangeHistory)
@if (ViewBag.OgnFlightLog != null)
{
    @Html.Partial("_ognFlightLog", (IEnumerable<OGN.FlightLog.Client.Models.Flight>)ViewBag.OgnFlightLog)
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        function resetJsCss() {
            $(".custom-combobox-input").css("border", "3px solid #888");
            $(".custom-combobox-toggle").css("border", "3px solid #888");
            $(".custom-combobox-toggle").css("border-left", "0px");
            $(".custom-combobox-toggle").css("padding-top", "1px");
            $(".custom-combobox-toggle").css("padding-bottom", "1px");
            $(".custom-combobox-toggle").css("padding-left", "8px");
            $(".custom-combobox-toggle").css("padding-right", "8px");
            $(".custom-combobox-toggle").css("margin-left", "0px");
            $(".custom-combobox-toggle").css("margin-right", "0px");
        }

        function processPlaneAttributes() {

            var value = $("#PlaneId").val();
            if (!value.trim()) return;

            var option = $("#PlaneId option[value='" + $("#PlaneId").val() + "']");

            // data-defaultstarttype="1"
            // data-engine="0"
            // data-seats="1"

            var seats = option.attr('data-seats');
            if (seats == "1") {
                $("#PilotBackseatId").combobox("destroy");
                $("#PilotBackseatId").hide("fast");
                $("#PilotBackseatId")[0].selectedIndex = 0;
            } else {
                if ($("#PilotBackseatId").combobox("isDestroyed")) {
                    $("#PilotBackseatId").show();
                    $("#PilotBackseatId").combobox();
                    $("#PilotBackseatId").combobox("create");
                    resetJsCss();
                }
            }

            var engines = option.attr('data-engine');
            if (engines == "0") {
                $("#TachoDeparture").hide("fast");
                $("#TachoDeparture")[0].value = "";
                $("#TachoLanding").hide("fast");
                $("#TachoLanding")[0].value = "";
            } else {
                $("#TachoDeparture").show("fast");
                $("#TachoLanding").show("fast");
            }

            var defaultStarttype = option.attr('data-defaultstarttype');
            if (!defaultStarttype.trim()) {
                $("#StartTypeId").combobox('autocomplete', defaultStarttype);
            }

            var registration = option.attr('data-registration');
            if ($("#flarm")) {
                $('#flarm > table > tbody  > tr').each(function (tr) {
                    if (this.hasAttribute("data-callsign")) {
                        if (this.attributes["data-callsign"].value == registration) {
                            this.className = "";
                        } else {
                            this.className = "hide";
                        }
                    }
                });
                if (registration) {
                    $('#FLARMAircraftFiltered').text(registration + " ");
                } else {
                    $('#FLARMAircraftFiltered').text("");
                }
            }
        }

        $(document).ready(function () {

            $("#PlaneId").combobox();
            $("#PilotId").combobox();
            $("#PilotBackseatId").combobox();
            $("#BetalerId").combobox();
            $("#StartTypeId").combobox();
            $("#StartedFromId").combobox();
            $("#LandedOnId").combobox();

            resetJsCss();

            $("#Landing").focus();

            $("input.custom-combobox-input").on("click", function () {
                $(this).select();
            });

            // Default pilot to betaler
            $("#BetalerId").on("change", function () {
                if ($("#BetalerId").val().trim() != "" && $("#PilotId").val() == "") {
                    $("#PilotId").combobox('autocomplete', $("#BetalerId").val());
                }
            });

            // Default landing to start from
            $("#StartedFromId").on("change", function () {
                if ($("#StartedFromId").val().trim() != "" && $("#LandedOnId").val() == "") {
                    $("#LandedOnId").combobox('autocomplete', $("#StartedFromId").val());
                }
            });

            // Default enabled fields based on selected plane
            $("#PlaneId").on("change", function () {
                processPlaneAttributes();
            });

            // Default visible fields on initial load
            processPlaneAttributes();

            // Pickup flarm enabled clubs
            if ($("#flarm")) {
                $(".ognFlightLogAction").on("click", function () {
                    if (this.hasAttribute("data-departure")) {
                        $("#Departure").val(this.attributes["data-departure"].value);
                        processOgnFlightAction("#Departure", "data-departure");
                    }
                    else if (this.hasAttribute("data-landing")) {
                        $("#Landing").val(this.attributes["data-landing"].value);
                        processOgnFlightAction("#Landing", "data-landing");
                    }
                });

                $("#Departure").on("change", function () {
                    processOgnFlightAction("#Departure", "data-departure");
                });

                $("#Landing").on("change", function () {
                    processOgnFlightAction("#Landing", "data-landing");
                });

                processOgnFlightAction("#Departure", "data-departure");
                processOgnFlightAction("#Landing", "data-landing");
            }
        });

        function processOgnFlightAction(formIdentifier, actionAttribute) {
            if ($("#flarm")) {
                if ($(formIdentifier).val()) {
                    $(".ognFlightLogAction[" + actionAttribute + "]").removeClass("btn-warning").addClass("btn-xs").removeClass("btn-success").addClass("btn-secondary");
                    $(".ognFlightLogAction[" + actionAttribute + "='" + $(formIdentifier).val() + "']").removeClass("btn-secondary").addClass("btn-success");
                } else {
                    $(".ognFlightLogAction[" + actionAttribute + "]").addClass("btn-warning").removeClass("btn-xs").removeClass("btn-secondary").removeClass("btn-success");
                }
            }
        }

    </script>
}

